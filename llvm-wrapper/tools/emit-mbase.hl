include "../llvm-bindings-list.al";

#(define export_prefix (S<< "extern " #\" "C" #\" " DLL_EXPORT"))

#(function filter_llvm (x) ((<r> "LLVM" _ ?) (string->list x)))
#(function mangle_llvm (nm) (S<< "LLVM_" (list->string (p-rest (filter_llvm (S<< nm))))))
#(define enumshsh (mkhash))
#(function llvm_typeof (l)
  (cond ((eq? "const char *" l) 't_string)
	((eq? "char *" l) 't_string)
	((eq? "const int" l) 't_int)
	((eq? "unsigned int" l) 't_int)
	((eq? "const unsigned int" l) 't_int)
	((eq? "uint8_t" l) 't_byte)
	((eq? "int" l) 't_int)
	((eq? "const long long" l) 't_int64)
	((eq? "unsigned long long" l) 't_int64)
	((eq? "const unsigned long long" l) 't_int64)
        ((eq? "void" l) 't_void)
        ((eq? "LLVMBool" l) 't_int)
	((hashget enumshsh l) 't_int)
        (else 't_intptr)))

function strtypes(tp)
   map t in tp do match t with 't_string' -> 't_intptr' | else -> t

function main()
collector(stradd, strget)
collector(add, get) {
 llvm_libname = "LLVM.so";
 enums_constants=map ([nm;tp;cs]) in %llvm-enums-lst do {
   ohashput(enumshsh, nm, llvm_typeof(tp));
   'define-enum-constant'(%Sm<<(nm), 
      @map ([cnm;cid]) in cs do [%Sm<<(cnm);cid])
 };
 #(begin
   	    ;; (add (S<< "(import \"libc.so.6\" \"_exit\" t_intptr t_int)"))
	    (add (S<< "(import " #\" llvm_libname #\" " " #\" "_LLVMCreateExecutionEngine" #\" " " "t_intptr t_intptr)"))
	    (add (S<< "(import " #\" llvm_libname #\" " " #\" "_LLVMRunFunction"  #\" " t_intptr t_intptr t_intptr)"))
	    (add (S<< "(import " #\" llvm_libname #\" " " #\" "_InvokeFunc0"  #\" " t_intptr t_intptr)"))
	    (add (S<< "(import " #\" llvm_libname #\" " " #\" "_InvokeFunc1"  #\" " t_intptr t_intptr t_int)"))
	    (add (S<< "(import " #\" llvm_libname #\" " " #\" "_InvokeFunc1p"  #\" " t_intptr t_intptr t_intptr)"))
	    (add (S<< "(import " #\" llvm_libname #\" " " #\" "_InvokeFunc2"  #\" " t_intptr t_intptr t_int t_int)"))
	    (add (S<< "(import " #\" llvm_libname #\" " " #\" "invoke_piii"  #\" " t_intptr t_intptr t_int t_int t_int)"))
	    (add (S<< "(import " #\" llvm_libname #\" " " #\" "invoke_pp"  #\" " t_intptr t_intptr t_intptr)")) 
	    (add (S<< "(import " #\" llvm_libname #\" " " #\" "InvokeNativeFunction"  #\" " t_intptr t_intptr t_int t_intptr)"))
	    (add (S<< "(import " #\" llvm_libname #\" " " #\" "_LLVMLinkInInterpreter"  #\" " t_void)"))
	    (add (S<< "(import " #\" llvm_libname #\" " " #\" "_LLVMLinkInMCJIT"  #\" " t_void)"))
	    (add (S<< "(import " #\" llvm_libname #\" " " #\""_LLVMInitializeNativeTarget" #\" " t_void)"))
	    (add (S<< "(import " #\" llvm_libname #\" " " #\""_LLVMInitializeNativeAsmPrinter" #\" " t_void)"))
	    (add (S<< "(import " #\" llvm_libname #\" " " #\""_LLVMGetGlobalValueAddress" #\" " t_intptr t_intptr t_intptr)"))
	    (add (S<< "(import " #\" llvm_libname #\" " " #\""_InitMCJIT" #\" " t_int t_intptr t_intptr)"))
  );
 iter ([nm;tp;args]) in %llvm-bindings-lst do {
   fnm = mangle_llvm(nm);
   pt = map ([an; at]) in args do llvm_typeof(at);
   add(%S<<("(import \"", llvm_libname, "\" \"",  fnm, "\" ",
                     strinterleave(strtypes(llvm_typeof(tp): pt), " "),
                     ")"));
   if(filter(fun(t) t==='t_string', pt)) {
      xargs = map pt count i do %Sm<<("a_", i);
      stradd(%S<<(#`(function ,(Sm<< fnm "S")
                           ,xargs
                      (,(Sm<< fnm)
                        ,@(foreach-map (x (zip xargs pt))
                             (format x (a t)
                                (case t
                                  ((t_string)
                                   `(marshal_str ,a))
                                  (else a))))))))
   };
  };
  #(begin
	    (foreach (i enums_constants)
	       (println i))
	    (println '(ctime (define t_intptr (r_typebyname "System.IntPtr"))))
	    (println '(ctime (define t_int64 (r_typebyname "System.Int64"))))
	    (println "(ctime (define t_void (r_typebyname \"System.Void\")))")
	    (println "(ctime (define t_string (r_typebyname \"System.String\")))")
	    (println "(native (classname Meta.LLVMW)")
	    (iter println (get))
	    (println ")")
	    (println "(force-class-flush)")
	    (println "(begin")
 	     (iter println (strget))
	    (println ")")
  );
}

main()