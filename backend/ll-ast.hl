/*

  A slightly refined version of the LLVM IR AST
 
*/


ast ir2 {

   irmodule is (.*irtoplevel:tls);

   irtoplevel = 
      %function(ircallconv:cc, ident:name, irtype:ret, bool:va, *irarg:args, ircode:body, any:annotations)
    | eglobal(ident:name, irtype:type)
    | global(ident:name, irtype:type, irval:v) // v = const only!
    | comment(anything:x)
    ;

  ircode is (.*irbblock:bs);
  irbblock =
     bblock(ident:name, *irpair:c, irterm:t);
  irarg is (irtype:type, ident:name);
  irlabel is (.ident:nm);

  irpair is (ident:nm, irexpr:e);

  irval = 
          false()
        | true()
        | null(irtype:t)
        | integer(int:v, .*ident:itp)
        | float(float:v, .*ident:ftp)
        | struct(. *irstructel:elts)
        | array(irtype:t, . *irval:elts)
        | vector(. *irval:elts)
        | zero(irtype:t)
        | undef(irtype:t)
        | blockaddress(ident:fn, ident:blk)
        | var(ident:nm)
        | global(ident:nm)
        | globalfun(ident:nm)
        | sizeof(irtype:t)
        // Useful for various backend legalisers
        | jumptable(irlabel:rel, .*irlabel:vs)
        ;

  irstructel is (irtype:t, irval:v);

  irtype = 
           integer(ident:type)
         | float(ident:ftype)
         | label()
         | void()
         | array(*int:dims, irtype:t, .*aspace:spc)
         | %function(irtype:ret, .*irtype:args)
         | varfunction(irtype:ret, .*irtype:args)
         | struct(ident:nm, . *irtype:elts)
         | structref(ident:nm)
         | packed(ident:nm, . *irtype:elts)
         | pointer(irtype:t, .*aspace:spc)
         | vector(int:n, irtype:t)
         | alias(ident:id)
         ;

  irterm = /* More or less the same as terminal instructions,
              with 'store' moved here and 'invoke' moved to irexpr */
     | ret(irval:value)
     | vret()
     | br(irval:cnd, irlabel:tr, irlabel:fl)
     | br_label(irlabel:nm)
     | switch(irval:value, irlabel:els, *irswitchdst:cases)
     | indirectbr(any:t, irval:addr, *irlabel:ds)
     /* No invoke here, since it returns a value */
     | unwind()
     | unreacheable()
     // For backends
     | indirectbr_jt(irlabel:relname, irval:addr, .*irlabel:ds)
     ;

  irswitchdst is ( irval:value, irlabel:dst );
  irphi is (irval:value, irlabel:dst);

  irexpr =
   | string(string:s)
   | volatile_store(irtype:t, irval:value, irtype:ty, irval:ptr, *irval:align)
   | store(irval:ptr, irval:e)
   | binary(irbinop:op, irval:l, irval:r)
   | extractelement(int:n, irval:v, irval:idx)
   | insertelement(int:n, irtype:t, irval:v, irval:elt, irval:idx)
   | shufflevector(int:n1, irval:val1, int:n2, irval:val2, irval:mask)
   | extractvalue(iraggtype:t, irval:v, irval:idx)
   | insertvalue(irval:v, irtype:tv, irval:elt, irval:idx)
   | alloca(irtype:t)
   | load(irval:ptr)
   | getelementptr(irval:ptr, *irval:idxs, .*irtype:ptrtp)
   | getelementptr_inbounds(irval:ptr, *irval:idxs, .*irtype:ptrtp)
   | convop(irconvop:op, irval:v, irtype:t)
   | icmp(iricond:vcond, irval:lhs, irval:rhs)
   | fcmp(irfcond:vcond, irval:lhs, irval:rhs)
   | phi(irtype:t, .*irphi:dsts)
   | select(irval:vif, irval:vthen, irval:velse)
   | call(ident:fn, .*irval:args)
   | callptr(irval:fn, .*irval:args)
   | callptrstd(irval:fn, .*irval:args)
   | ptr(irval:src, irtype:dst)
   | inline(irtype:t, *irval:args, any:code)
   ;
}
